import "../Header Files/vision.del";
import "../Header Files/model/player_controller.del";
import "../Header Files/ui.del";

globalvar Vector[] visionEffect = [Vector(-16, 0, -3), Vector(-12, 0, -3), Vector(-8, 0, -3), Vector(-4, 0, -3), Vector(0, 0, -3), Vector(4, 0, -3), Vector(8, 0, -3), Vector(12, 0, -3), Vector(-18, 0, 1), Vector(-14, 0, 1), Vector(-10, 0, 1), Vector(-6, 0, 1), Vector(-2, 0, 1), Vector(2, 0, 1), Vector(6, 0, 1), Vector(10, 0, 1), Vector(14, 0, 1), Vector(-20, 0, 5), Vector(-16, 0, 5), Vector(-12, 0, 5), Vector(-8, 0, 5), Vector(-4, 0, 5), Vector(0, 0, 5), Vector(4, 0, 5), Vector(8, 0, 5), Vector(12, 0, 5), Vector(16, 0, 5), Vector(-22, 0, 9), Vector(-18, 0, 9), Vector(-14, 0, 9), Vector(-10, 0, 9), Vector(-6, 0, 9), Vector(-2, 0, 9), Vector(2, 0, 9), Vector(6, 0, 9), Vector(10, 0, 9), Vector(14, 0, 9), Vector(18, 0, 9), Vector(-24, 0, 13), Vector(-20, 0, 13), Vector(-16, 0, 13), Vector(-12, 0, 13), Vector(-8, 0, 13), Vector(-4, 0, 13), Vector(0, 0, 13), Vector(4, 0, 13), Vector(8, 0, 13), Vector(12, 0, 13), Vector(16, 0, 13), Vector(20, 0, 13), Vector(-26, 0, 17), Vector(-22, 0, 17), Vector(-18, 0, 17), Vector(-14, 0, 17), Vector(-10, 0, 17), Vector(-6, 0, 17), Vector(-2, 0, 17), Vector(2, 0, 17), Vector(6, 0, 17), Vector(10, 0, 17), Vector(14, 0, 17), Vector(18, 0, 17), Vector(22, 0, 17)]; //-30, 30, -5, 20
define visionPosition(Number index): visionEffect[EvaluateOnce(index)] + Vector(0,3,-2)+ cameraPosition(LocalPlayer());
rule: 'Create Vision Effects'
Event.OngoingGlobal
{
    Wait(3);
    for(Number i! = 0; i < visionEffect.Length; i++){
        CreateEffect(LocalPlayer().visionTiles[EvaluateOnce(i)] > 0.5 ? controllers : null, Effect.Cloud, CustomColor(255/63*i, 255, 255),  visionPosition(i), 1*Min(1,LocalPlayer().visionTiles[EvaluateOnce(i)]), EffectRev.VisibleToPositionAndRadius);
        // Wait(0.064);
        // CreateInWorldText(LocalPlayer(), i,  visionPosition(i), 1, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition, Color.Black);
        // Wait(0.064);
    }
}

rule: 'Setup '
Event.OngoingPlayer
{
   Wait(1);
   visionTiles[visionEffect.Length] = 1000;
   visionTiles = MappedArray(visionTiles, 1);
}

define playerVisibilityArray: TeamOf(EventPlayer()) == Team.Team1 ? Visible_Team1 : Visible_Team2;
define playerVisibilityArray_distance: TeamOf(EventPlayer()) == Team.Team1 ? Visible_Team1_distance : Visible_Team2_distance;

rule: "update Vision"
Event.OngoingPlayer
if(!IsDummyBot())
if(isSetup())
{
    Vector[] test = MappedArray(playerVisibilityArray, (ArrayElement() - cameraPosition()) * Vector(1, 0, 1) + Up() * playerVisibilityArray_distance[CurrentArrayIndex()]);
    test = FilteredArray(test, 
        XOf(ArrayElement()) >= -30
        && XOf(ArrayElement()) <= 30
        && ZOf(ArrayElement()) >= -5
        && ZOf(ArrayElement()) <= 20
    );
    visionTiles = MappedArray(visionTiles,1);
    foreach(Vector v in test){
        visionTiles = MappedArray(visionTiles, Min(DistanceBetween(v * Vector(1, 0, 1),  visionEffect[CurrentArrayIndex()]* Vector(1, 0, 1))/v.Y, ArrayElement()));
    }
    // for (define i = 0; visionEffectWidth; 1) {
    //     for(define j = 0; 6; 1){
    //         define index! = EvaluateOnce(i*j);
    //         visionTiles[index] = SortedArray(playerVisibilityArray(), playerVisibilityArray_distance()[CurrentArrayIndex()]/visionDistanceFromArrayElement(i,j));
    //         forceLog(toString(visionTiles[index]));
    //         visionTiles[index] = visionTiles[index][0];
    //     }
    // }
    Wait(0.064);
    Loop();
}