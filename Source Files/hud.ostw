import "../Header Files/hud.del";
import "../Header Files/ui.del";

rule: 'Healthbar'
{
    define uiVis: LocalPlayer().showHUD ? controllers : null;
    define uiReev: InworldTextRev.VisibleToPositionAndString;
    define uiColor: Color.White;
    //UpdateEveryFrame(LocalPlayer().showHUD ? LocalPlayer() : null)
    define scale: 10;
    CreateInWorldText(uiVis, getOther(LocalPlayer()).healthbarString[1], UpdateEveryFrame(uiPos_customDistance(LocalPlayer(), 0.875*scale,-0.55*scale, scale)), 2, Clipping.DoNotClip, uiReev, Color.Green, Spectators.DefaultVisibility);
    CreateInWorldText(uiVis, getOther(LocalPlayer()).healthbarString[0], UpdateEveryFrame(uiPos_customDistance(LocalPlayer(), 0.875*scale,-0.55*scale, scale)), 2, Clipping.DoNotClip, uiReev, uiColor, Spectators.DefaultVisibility);
    CreateInWorldText(uiVis, HeroIconString(HeroOf(LocalPlayer().otherModelMember)), UpdateEveryFrame(uiPos_customDistance(LocalPlayer(), 1.12*scale,-0.56*scale, scale)), 4, Clipping.DoNotClip, uiReev, uiColor, Spectators.DefaultVisibility);
}


void setName(in Any nameIn, in Player p = EventPlayer()){
    //＿
    setPlayerInfo(EPlayerInfo.NAME_STRING, <String>nameIn, p);
    Number maxWidth: 14;
    define len: StringLength(getPlayerInfo(EPlayerInfo.NAME_STRING, p));
    setPlayerInfo(EPlayerInfo.NAME_BUFFER_CHARS, len > 8 ? 1 : len > 4 ? 2 : 3 , p);
}

void updateHealthBar(Player p = EventPlayer()){
    Number perBlockHealthAmount! = 25;
    Number blocks! = RoundToInteger(p.maxHealth/perBlockHealthAmount,Rounding.Down);
    while(blocks > 35){
        blocks -= 30;
        Wait();
        perBlockHealthAmount *= 6;
    }
    Number id! = hpbar_dictionary[blocks];
    String hpbar_sep: hpbar_symbols[id][4];
    String barOutput! = $"่";
    String blankOutput! = $"{hpbar_sep}่";
    Number percentage: p.health/p.maxHealth;
    for (Number i! = 0; i < blocks; i++){
        if(i % hpbar_groupings[id] == 0 && i != 0){
            barOutput = $"{barOutput} ";
            blankOutput = $"{blankOutput}{hpbar_sep}";
        }
        Number remaining! = p.health-i*perBlockHealthAmount;
        if(remaining >= perBlockHealthAmount){
            barOutput = $"{barOutput}{hpbar_symbols[id][0]}";
        }else if (remaining <= 0){
            barOutput = $"{barOutput}{hpbar_symbols[id][3]}";
        }else{
            barOutput = $"{barOutput}{hpbar_symbols[id][3-RoundToInteger(3*remaining/perBlockHealthAmount, Rounding.Up)]}";
        }
        blankOutput = $"{blankOutput}{hpbar_symbols[id][3]}";
        
    }
    p.healthbarString[0] = $"{barOutput}";
    p.healthbarString[1] = $"{blankOutput}{hpbar_sep}่";
}
