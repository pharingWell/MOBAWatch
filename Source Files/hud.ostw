import "../Header Files/hud.del";
import "../Header Files/ui.del";
Color uiColor(in Number r, in Number g, in Number b): CustomColor(r,b,g,LocalPlayer().showHUD*255);

rule: 'Global HUD Setup'
{
    Wait(2);
//cursor
    define cursorPosition: uiPos(LocalPlayer(),HorizontalFacingAngleOf(LocalPlayer()),-VerticalFacingAngleOf(LocalPlayer()));
    CreateInWorldText(LocalPlayer(),"•",UpdateEveryFrame(cursorPosition), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition);
    CreateEffect(LocalPlayer(),Effect.Sphere, Color.Aqua, UpdateEveryFrame(LocalPlayer().cursorWorldPositon),0.1,EffectRev.VisibleToPositionAndRadius);

//healthbar
    define uiVis: LocalPlayer();
    define uiReev: InworldTextRev.VisibleToPositionStringAndColor;
    //UpdateEveryFrame(LocalPlayer().showHUD ? LocalPlayer() : null)
    define scale: 10;
    define healthBarAnchor: UpdateEveryFrame(uiPos_customDistance(LocalPlayer(),0.80*scale,-0.575*scale, scale));
    define nameAnchor: UpdateEveryFrame(uiPos_customDistance(LocalPlayer(),1.12*scale,-0.615*scale, scale));
    define playerIconAnchor: UpdateEveryFrame(uiPos_customDistance(LocalPlayer(), 1.12*scale,-0.56*scale, scale));
    define spaces: "                                         ";
    CreateInWorldText(uiVis, $"{getOther(LocalPlayer()).healthbarVariables[EHealthBarVars.FINAL_String]}\n{spaces}", healthBarAnchor, 2, Clipping.DoNotClip, uiReev, uiColor(255,255,255), Spectators.DefaultVisibility);
    Wait();
    CreateInWorldText(uiVis, $"{getOther(LocalPlayer()).healthbarVariables[EHealthBarVars.BLANK_String]}\n{spaces}", healthBarAnchor , 2, Clipping.DoNotClip, uiReev, uiColor(0,30,200), Spectators.DefaultVisibility);
    define healthBufferChars: StringSlice("     ", 0, getPlayerInfo(EPlayerInfo.NAME_STRING, LocalPlayer()) > 7 ? 2 : 1);
    define nameBufferChars: "";// StringSlice("￣￣￣￣", 0, getPlayerInfo(EPlayerInfo.NAME_BUFFER_CHARS, LocalPlayer()));
    CreateInWorldText(uiVis, $"{healthBufferChars}{getOther(LocalPlayer()).health}｜{getOther(LocalPlayer()).maxHealth}\n\n\n\n\n{nameBufferChars}{getPlayerInfo(EPlayerInfo.NAME_STRING, LocalPlayer())}{nameBufferChars}", nameAnchor, 0.9, Clipping.DoNotClip, uiReev, uiColor(255,255,255), Spectators.DefaultVisibility);
    CreateInWorldText(uiVis, HeroIconString(HeroOf(LocalPlayer().otherModelMember)), playerIconAnchor, 4, Clipping.DoNotClip, uiReev, uiColor(255,255,255), Spectators.DefaultVisibility);
}


void setName(in Any nameIn, in Player p = EventPlayer()){
    setPlayerInfo(EPlayerInfo.NAME_STRING, <"<0>",nameIn>, p);
    Number maxWidth: 14;
    define len: StringLength(getPlayerInfo(EPlayerInfo.NAME_STRING, p));
    setPlayerInfo(EPlayerInfo.NAME_BUFFER_CHARS, len > 8 ? 1 : len > 4 ? 2 : 3 , p);
}

/*
TO DEBUG
Here are some options:
   1. Wait for references
   2. Copy the code and replace all instances of _String], _Number] and healthbarVariables[EHealthBarVars. with nothing 
   3. Know what the code does
*/
void updateHealthBar(in Player p = EventPlayer())
{
    healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number] = 25;
    healthbarVariables[EHealthBarVars.BLOCKS_Number] = RoundToInteger(p.maxHealth/healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number],Rounding.Down);
    while(healthbarVariables[EHealthBarVars.BLOCKS_Number] > 35){
        healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number] *= 6;
        healthbarVariables[EHealthBarVars.BLOCKS_Number] = RoundToInteger(p.maxHealth/healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number],Rounding.Down);
        Wait();
    }
    
    healthbarVariables[EHealthBarVars.ID_Number] = hpbar_dictionary[healthbarVariables[EHealthBarVars.BLOCKS_Number]];

    String hpbar_sep: hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][4];
    String blank_sep: ' ';
    Number blocksAtWhichBlankSepIsInvalid: 26;
    healthbarVariables[EHealthBarVars.BLANK_WIP_String] = "";
    healthbarVariables[EHealthBarVars.FINAL_WIP_String] = "";
    for (healthbarVariables[EHealthBarVars.ITERATOR_Number] = 0; healthbarVariables[EHealthBarVars.ITERATOR_Number] < healthbarVariables[EHealthBarVars.BLOCKS_Number]; healthbarVariables[EHealthBarVars.ITERATOR_Number]++){

        if(healthbarVariables[EHealthBarVars.ITERATOR_Number] % hpbar_groupings[healthbarVariables[EHealthBarVars.ID_Number]] == 0 && healthbarVariables[EHealthBarVars.ITERATOR_Number] != 0){
            if(healthbarVariables[EHealthBarVars.BLOCKS_Number] < blocksAtWhichBlankSepIsInvalid){
                healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{blank_sep}";
            }else{
                healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3]}";
            }
            healthbarVariables[EHealthBarVars.BLANK_WIP_String] = $"{healthbarVariables[EHealthBarVars.BLANK_WIP_String]}{hpbar_sep}";
        }

        healthbarVariables[EHealthBarVars.REMAINING_Number] = p.health-healthbarVariables[EHealthBarVars.ITERATOR_Number]*healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number];
        if(healthbarVariables[EHealthBarVars.REMAINING_Number] >= healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number]){
            healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][0]}";
        }else if (healthbarVariables[EHealthBarVars.REMAINING_Number] <= 0){
            healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3]}";
        }else{
            healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3-RoundToInteger(3*healthbarVariables[EHealthBarVars.REMAINING_Number]/healthbarVariables[EHealthBarVars.HP_PER_BLOCK_Number], Rounding.Up)]}";
        }

        healthbarVariables[EHealthBarVars.BLANK_WIP_String] = $"{healthbarVariables[EHealthBarVars.BLANK_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3]}";
    }
   
    if(healthbarVariables[EHealthBarVars.BLOCKS_Number] < blocksAtWhichBlankSepIsInvalid){
        healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{blank_sep}่{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{blank_sep}่";
    }else{
        healthbarVariables[EHealthBarVars.FINAL_WIP_String] = $"{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3]}่{healthbarVariables[EHealthBarVars.FINAL_WIP_String]}{hpbar_symbols[healthbarVariables[EHealthBarVars.ID_Number]][3]}่";
    }
    p.healthbarVariables[EHealthBarVars.FINAL_String] = healthbarVariables[EHealthBarVars.FINAL_WIP_String];
    p.healthbarVariables[EHealthBarVars.BLANK_String] = $"{hpbar_sep}่{healthbarVariables[EHealthBarVars.BLANK_WIP_String]}{hpbar_sep}่";
}
