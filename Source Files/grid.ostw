import "../global.del";
import "../debug.ostw";
import "../Header Files/ui.del";
import "../Header Files/grid.del";

void Cell_fromGridCoord(ref Cell cellptr, in Number xcord, in Number ycord){
    Boolean outOfBounds! = (xcord >= GRID_COLUMNS || xcord < 0 || ycord >= GRID_ROWS || ycord < 0);
    if(outOfBounds){
        cellptr = null;
    }else{
        cellptr = grid.cells[xcord + ycord * GRID_COLUMNS];
    }  
}

void Cell_byPosition(ref Cell cellptr, in Vector inputPosition)
{
    Number xcord! = RoundToInteger((inputPosition-GRID_BASE).X/CELL_WIDTH,Rounding.Down);
    Number ycord! = RoundToInteger((inputPosition-GRID_BASE).Z/CELL_HEIGHT,Rounding.Down);
    Cell_fromGridCoord(cellptr, xcord,ycord);
}

void getAllCellsInUniformDistanceFromCell(ref Cell[] retCells, in Cell given, in Number distance){
    if(given == null){
        return;
    }
    retCells = [];
    for(define j! = -distance; j <= distance; j++){
       for(define i! = -distance; i <= distance; i++){
            Cell temp!;
            Cell_fromGridCoord(temp, given.x+i,given.y+j);
            if (temp != null){
                retCells.ModAppend(temp);
            }
        } 
    }
}



















// void requestCells(ref Any[] arrayPointer, in Cell[] cells){ //moves all the requested cells into playerCells
//     arrayPointer = [];
//     foreach(Cell cell in cells){
//         arrayPointer.ModAppend(cell);
//     }
// }