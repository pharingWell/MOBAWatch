import "../Header Files/ui.del";
import "../Header Files/state.del";
import "../debug.ostw";
import "grid.ostw";


rule: 'Global Render Setup' 
if(gameState[EGamePhase.LOADING] == ELoadingState.RENDER_SETUP)
{
    gridConstructor();
    for(define i = 0; i < RENDER_SIZE; i++){
        Creature creature: LocalPlayer().renderCreatures[EvaluateOnce(i)];
        Number tick: (TotalTimeElapsed()-creature.tickOffset);
        CreateInWorldText(
            creature.visibility ? LocalPlayer() : null,
            creature.appearance,
            creature.position + tick*creature.velocity,
            3, 
            Clipping.DoNotClip, 
            InworldTextRev.VisibleToPositionStringAndColor,
            creature.color, 
            Spectators.DefaultVisibility   
        );
    }
    progressState();
}

rule: 'Player Render Setup'
Event.OngoingPlayer
{
    DisableGameModeHud();
}

rule: 'Grind Render Loop'

Event.OngoingPlayer
if(!IsDummyBot(EventPlayer()))
if(gameState[EGamePhase.LOADING] > ELoadingState.RENDER_SETUP)
{
    
    define VIEW_RANGE: 2;
    Cell[] observedCells;
    Cell temp!;
    Cell_byPosition(temp,EventPlayer().Position());
    getAllCellsInUniformDistanceFromCell(observedCells,temp, VIEW_RANGE);
    //!
    Cell[] noLongerObservedCells = FilteredArray(EventPlayer().playerCells, !ArrayContains(observedCells,ArrayElement()));
    //!
    Cell[] newlyObservedCells = FilteredArray(observedCells, !ArrayContains(EventPlayer().playerCells,ArrayElement())); 
    
    if(CountOf(EventPlayer().playerCells)!=CountOf(observedCells)){
        LogToInspector($"-{CountOf(noLongerObservedCells)}  +{CountOf(newlyObservedCells)}");
    }
    
    foreach(Cell cell! in noLongerObservedCells){
        LogToInspector($"Removing {cell}");
        foreach(Number n! in EventPlayer().cellCreatures.Get(cell)){
            EventPlayer().renderCreatures = RemoveFromArrayAtIndex(EventPlayer().renderCreatures,n);
        }
        Dictionary<Cell,Number[]>.Set(EventPlayer().cellCreatures,cell,[]);
        //for each item in the cell data, 
        foreach(Number n! in EventPlayer().cellProjectiles.Get(cell)){
            EventPlayer().renderProjectiles = RemoveFromArrayAtIndex(EventPlayer().renderProjectiles,n);
        }
        Dictionary<Cell,Number[]>.Set(EventPlayer().cellProjectiles,cell,[]);
        cell.viewers.ModRemoveByValue(EventPlayer().controller);
    }
    
    foreach(Cell cell! in newlyObservedCells){
        LogToInspector($"Adding {cell}, dynamic: {toString(cell.dynamic)}");
        cell.viewers.ModAppend(EventPlayer().controller);
        Number[] creatureIndexes = [];
        Number[] projectileIndexes = [];
        foreach(Entity e! in cell.dynamic){
            if(e.subclass == EEntitySubclass.CREATURE){
                creatureIndexes.ModAppend(renderCreatures.Length);
                EventPlayer().renderCreatures.ModAppend(<Creature>e);
            }else{
                projectileIndexes.ModAppend(renderProjectiles.Length);
                EventPlayer().renderProjectiles.ModAppend(<Projectile>e);
            }
        }
        Dictionary<Cell,Number[]>.Set(EventPlayer().cellCreatures,cell,creatureIndexes);
        Dictionary<Cell,Number[]>.Set(EventPlayer().cellProjectiles,cell,projectileIndexes);
    }
    EventPlayer().playerCells = observedCells;
    Wait(0.25);
    Loop();
}





