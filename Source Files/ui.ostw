import "../Header Files/ui.del";
import "../Header Files/state.del";
import "../debug.ostw";
import "grid.ostw";


rule: 'Global Render Setup' 
if(gameState[EGamePhase.LOADING] == ELoadingState.RENDER_SETUP)
{
    gridConstructor();
    for(define i = 0; i < RENDER_SIZE; i++){
        Creature creature: LocalPlayer().renderCreatures[EvaluateOnce(i)];
        Number tick: (TotalTimeElapsed()-creature.tickOffset);
        CreateInWorldText(
            creature.visibility ? LocalPlayer() : null,
            creature.appearance,
            creature.position + tick*creature.velocity,
            3, 
            Clipping.DoNotClip, 
            InworldTextRev.VisibleToPositionStringAndColor,
            creature.color, 
            Spectators.DefaultVisibility   
        );
    }
    progressState();
}

rule: 'Player Render Setup'
Event.OngoingPlayer
if(!IsDummyBot(EventPlayer()))
{
    DisableGameModeHud();
    define VIEW_RANGE: 2;
    Cell[] observedCells! = getAllCellsInUniformDistanceFromCell(Grid_cellByPosition(EventPlayer().Position()), VIEW_RANGE);
    if(observedCells!=null){
        Cell[] newCells! = FilteredArray(observedCells, !ArrayContains(EventPlayer().playerCells,ArrayElement())); 
        Cell[] oldCells! = FilteredArray(EventPlayer().playerCells, !ArrayContains(observedCells,ArrayElement()));
        foreach(Cell cell! in oldCells){
            foreach(Number n! in cellCreatures.Get(cell)){
                renderCreatures = RemoveFromArrayAtIndex(renderCreatures,n);
            }
            Dictionary<Cell,Number[]>.Set(cellCreatures,cell,[]);
            //for each item in the cell data, 
            foreach(Number n! in cellProjectiles.Get(cell)){
                renderProjectiles = RemoveFromArrayAtIndex(renderProjectiles,n);
            }
            Dictionary<Cell,Number[]>.Set(cellProjectiles,cell,[]);
            cell.viewers.ModRemoveByValue(EventPlayer().controller);
        }
        foreach(Cell cell! in newCells){
            cell.viewers.ModAppend(EventPlayer().controller);
            Number[] creatureIndexes! = [];
            Number[] projectileIndexes! = [];
            foreach(Entity e! in cell.dynamic){
                if(e.subclass == EEntitySubclass.CREATURE){
                    creatureIndexes.ModAppend(renderCreatures.Length);
                    renderCreatures.ModAppend(<Creature>e);
                }else{
                    projectileIndexes.ModAppend(renderProjectiles.Length);
                    renderProjectiles.ModAppend(<Projectile>e);
                }
            }
        }
        EventPlayer().playerCells = observedCells;
    }
    Wait(0.25);
    Loop();
}





