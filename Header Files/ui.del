import "../global.del";
import "../Header Files/creature.del";
import "../Header Files/projectile.del";
import "../Header Files/structures.del";

define VAL1: 0.5;
define VAL2: -0.866;
define FORWARD_VECTOR: Vector(0, VAL2, VAL1);
define RIGHT_VECTOR: Vector(1,0,0);
define UP_VECTOR: Vector(0,VAL1,-VAL2);
//playervar Number Setting_CAMERA_DISTANCE = 12;
define Setting_CAMERA_DISTANCE : 12;
playervar Vector cameraPos = Vector(0,0,0);
playervar Vector cursorWorldPositon;
Vector cameraEye(in Player p){
    return FORWARD_VECTOR * -Setting_CAMERA_DISTANCE + cameraPosition(p);
}

Vector cameraPosition(in Player p){
    return p.cameraPos;
}

define SCALE: 100;
Vector uiPos(in Player p, in Number x, in Number y){
    return cameraEye(p) + SCALE * FORWARD_VECTOR + RIGHT_VECTOR * x + UP_VECTOR * y;
}

Vector uiToWorld(in Player p, in Number x, in Number y){
    define towards: <Vector>(FORWARD_VECTOR * SCALE + RIGHT_VECTOR * x + UP_VECTOR * y);
    return (-cameraEye(p).Y/towards.Y)*towards + cameraEye(p);
}
/*
    #!define eyePosition localPlayer.getEyePosition() 
// Replace all instances of eyePosition with cameraPosition if you're using a camera //
    #!define cameraPosition vect()
    #!define cameraLookAt vect()   
    #!define vFOR localPlayer.getFacingDirection()
    #!define vFOR_Camera directionTowards(cameraPosition,cameraLookAt)
// Replace all instances of vFOR with vFOR_Camera if you're using a camera //
    #!define vLEFT angleToDirection(horizontalAngleOfDirection(vFOR)-90,verticalAngleOfDirection(vFOR))
    #!define vDOWN crossProduct(vLEFT,vFOR)
    #!define SCALE 50
    #!define uiPos(xpos,ypos) updateEveryTick(eyePosition+SCALE*vFOR+(xpos)*vLEFT+ (ypos)*vDOWN) //takes a position on the 2D screen, thus only x and y
rule "":
    createInWorldText(localPlayer,"Â¤",uiPos(0,0),2.0,Clip.NONE,WorldTextReeval.VISIBILITY_POSITION_AND_COLOR,Color.SKY_BLUE,SpecVisibility.NEVER)
    

*/