import "creature.del";
import "../error.ostw";

define MINION_WAVE_SIZE: [0,3,1,3,0,0];
define EMinionType_toArray: [EMinionType.NONE,EMinionType.MELEE,EMinionType.MAGE,EMinionType.RANGED,EMinionType.SEIGE,EMinionType.BRUTE];
globalvar Minion[] minions;

globalvar Number[] waves; //points to the index of the first minion in the wave. When removing a mi
//zeroes?

define TEAM1_MINION_SPAWN: Vector(CELL_WIDTH/2,0,10);

define TEAM2_MINION_SPAWN: Vector(CELL_WIDTH/2,0,-10);

enum EMinionType{
    NONE,
    MELEE,
    MAGE,
    RANGED,
    SEIGE,
    BRUTE
}
class Minion : Creature
{
    public EMinionType type;
    public constructor(in Team team, in EMinionType type){
        entity_constructor();
        this.team = team;
        this.type = type;
        switch (team){
            case Team.Team1:
                this.color = Color.Team1;
                this.position = TEAM1_MINION_SPAWN;
                this.velocity = Vector(0,0,-1);
                break;
            case Team.Team2:
                this.color = Color.Team2;
                this.position = TEAM2_MINION_SPAWN;
                this.velocity = Vector(0,0,1);
                break;
            case Team.All:
                async throwError({
                    message: "Tried to create a neutral minion.",
                    source: "Minion, constructor, case Team.ALL",
                    severity: EErrorSeverity.FATAL
                    });
                break;
        }
        appearance = ["","ι","ί",team == Team.Team1 ? "R" : "Я","ϊ","ΐ"][type];
        if(!appearance){
            throwError({
                message: "Minion rendered with no appearance", 
                source: "Minion, constructor, apperance",
                severity: EErrorSeverity.WARNING
                });
        }
        
        Wait(0.016);
        visibility = true;
    }

}