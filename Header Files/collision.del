
enum EColliderType{
    SIMPLE,
    ARC,
    GRID_ALIGNED,
    POLYGON


}

single struct SimpleCollider{
    public Number radius;
    public Vector center;
}

SimpleCollider SimpleCollider_construct(Number radius, Vector center): {radius: radius, center: center};

single struct ArcCollider{
    public Vector center;
    public Vector radius;
    public Vector angle;

    Number getRadiusMin(): radius.X;
    Number getRadiusMax(): radius.Y;
    Number getAngleMin(): angle.X;
    Number getAngleMax(): angle.Y;
    }

ArcCollider ArcCollider_construct(Vector center, Number radius_max, Number radius_min = 0, Number angle_max, Number angle_min): {center: center, radius: Vector(radius_min, radius_max, 0), angle: Vector(angle_min, angle_max, 0)};
ArcCollider ArcCollider_fromSimple(SimpleCollider simple, Number angle_min, Number angle_max): {center: simple.center, radius: Vector(0, simple.radius, 0), angle: Vector(angle_min, angle_max, 0)};

define getAngleAtDistance(Number angle, Number distance): DirectionFromAngles(angle, 0) * distance;

void ArcCollider_visualize(ArcCollider ac){
    if(ac.getRadiusMin() > 0){
        CreateEffect(AllPlayers(), Effect.Ring, Color.Black, ac.center, ac.getRadiusMin(), EffectRev.VisibleTo);
    }
    CreateEffect(AllPlayers(), Effect.Ring, Color.White, ac.center, ac.getRadiusMax(), EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, getAngleAtDistance(ac.getAngleMin(), ac.getRadiusMin()), getAngleAtDistance(ac.getAngleMin(), ac.getRadiusMax()), Color.White, EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.GoodBeam, getAngleAtDistance(ac.getAngleMax(), ac.getRadiusMin()), getAngleAtDistance(ac.getAngleMax(), ac.getRadiusMax()), Color.White, EffectRev.VisibleTo);
}

# Grid Aligned (AABB) Collider 
single struct GridAlignedCollider {
    public Vector center;
    public Number halfwidth;
    public Number halfheight;
}

GridAlignedCollider GridAlignedCollider_construct(Vector center, Number halfwidth, Number halfheight): {center: center, halfwidth: halfwidth, halfheight: halfheight};

void GridAlignedCollider_visualize(GridAlignedCollider gac){
    define gac_BOTTOM_LEFT:  Vector(gac.center+gac.halfwidth, 0, gac.center-gac.halfheight);
    define gac_TOP_LEFT:  Vector(gac.center+gac.halfwidth, 0, gac.center+gac.halfheight);
    define gac_BOTTOM_RIGHT:  Vector(gac.center-gac.halfwidth, 0, gac.center-gac.halfheight);
    define gac_TOP_RIGHT:  Vector(gac.center-gac.halfwidth, 0, gac.center+gac.halfheight);
    CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, gac_TOP_LEFT, gac_BOTTOM_LEFT, Color.White, EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, gac_BOTTOM_LEFT, gac_BOTTOM_RIGHT, Color.White, EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, gac_BOTTOM_RIGHT, gac_TOP_RIGHT, Color.White, EffectRev.VisibleTo);
    CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, gac_TOP_RIGHT, gac_TOP_LEFT, Color.White, EffectRev.VisibleTo);
}

globalvar ArcCollider[] arcColliders = [];

rule: 'My Rule'
{
    ArcCollider a = ArcCollider_fromSimple(SimpleCollider_construct(1, Vector()), 10, 50);
    ArcCollider_visualize(a);
}