struct Dictionary<K, V>
{
    public K[] Keys;
    public V[] Values;

    public V Get(K key)
    {
        return Values[Keys.IndexOf(key)];
    }
    
    // Sets a value in the dictionary.
    public static void Set(ref Dictionary<K, V> dictionary, in K key, in V value)
    {
        dictionary.Values[dictionary.Keys.IndexOf(key)] = value;
    }
    
    // Adds a value to the dictionary.
    public static void Add(ref Dictionary<K, V> dictionary, in K key, in V value)
    {
        dictionary.Keys += key;
        dictionary.Values += value;
    }

    // Sets a value in the dictionary. Will add the key if it doesn't exist.
    public static void SetOrAdd(ref Dictionary<K, V> dictionary, in K key, in V value)
    {
        Number index = dictionary.Keys.IndexOf(key);
        if (index == -1) // Key not found; add it.
            Add(dictionary, key, value);
        else
            dictionary.Values[index] = value;
    }
}

void BetterAppend(ref Any[] array, in Any value){
    array[array.Length] = value;
}

struct Vector2{
    private Vector vect;
    public Number x(){
        return vect.X;
    }
    public Number y(){
        return vect.Y;
    }
    public Vector getVect(){
        return vect;
    }
    public static Boolean isEqual(in Vector2 vect, in Number x, in Number y){
        return vect.getVect() == Vector(x, y, 0);
    }
    public static Boolean isEqual(in Vector2 vect1, in Vector2 vect2){
        return vect1.getVect() == vect2.getVect();
    }
    public static Vector2 make(in Number x, in Number y){
        return {vect:Vector(x, y, 0)};
    }

}

struct Region{
    public Vector2 topleft;
    public Vector2 bottomright;
}